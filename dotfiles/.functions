#!/usr/bin/env bash

# List directory contents with cd
function cd() { builtin cd "$@" && ls; }

# Create a new directory and enter it
function mkcd() { mkdir -p "$@" && cd "$_"; }

# Go up N directories
function up() {
  str=""
  count=0
  while [ "$count" -lt "$1" ]; do
    str=$str"../"
    let count=count+1
  done
  cd $str
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

# Find and Replace: findreplace searchText replacementText
function findreplace() { ack "$1" -la --print0 | xargs -0 -n 1 sed -i "s/$1/$2/"; }

# Opens any file in MacOS Quicklook Preview
function ql() { qlmanage -p "$*" >& /dev/null; }

# Zip the directory
function zd() { zip -r "$1".zip "$1"; }

# 7zip the directory
function 7zd() { 7z a "$1" "$1"/*; }

# Extract most known archives with one command
function extract() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar xvjf $1                                   ;;
      *.tar.gz)  tar xvzf $1                                   ;;
      *.tar.xz)  tar xvJf $1                                   ;;
      *.lzma)    unlzma $1                                     ;;
      *.bz2)     bunzip2 $1                                    ;;
      *.rar)     unrar x -ad $1                                ;;
      *.gz)      gunzip $1                                     ;;
      *.tar)     tar xvf $1                                    ;;
      *.tbz2)    tar xvjf $1                                   ;;
      *.tgz)     tar xvzf $1                                   ;;
      *.zip)     unzip $1                                      ;;
      *.Z)       uncompress $1                                 ;;
      *.7z)      7z x $1                                       ;;
      *.xz)      unxz $1                                       ;;
      *.exe)     cabextract $1                                 ;;
      *)         echo "extract: '$1' - unknown archive method" ;;
    esac
  else
    echo "$1 - file does not exist"
  fi
}

# to ascii
function decode() {
  if   [[ $1 = 'base64' ]]; then shift 1; echo -n "$@" | base64 --decode
  elif [[ $1 = 'binary' ]]; then shift 1; echo -n "$@" | perl -lpe '$_=pack"B*",$_'
  elif [[ $1 = 'hex'    ]]; then shift 1; echo -n "0x$@" | xxd -r
  fi
}

# from ascii
function encode() {
  if   [[ $1 = 'base64' ]]; then shift 1; echo -n "$@" | openssl base64
  elif [[ $1 = 'binary' ]]; then shift 1; echo -n "$@" | perl -lpe '$_=unpack"B*"'
  elif [[ $1 = 'hex'    ]]; then shift 1; echo -n "$@" | xxd -p
  elif [[ $1 = 'md5'    ]]; then shift 1; echo -n "$@" | openssl md5
  elif [[ $1 = 'sha1'   ]]; then shift 1; echo -n "$@" | openssl sha1
  fi
}

# resize: optimal settings for resizing images
# parameters - size (width in pixels, height is automatic), file, outputdir
# resize 300 "file.ext" outputdir/
function resize() { mogrify -path $3 -resize $1 -quality 85 -density 72 -strip $2; }

# crush: it's resize in batch form
# parameters: size (width in pixels, height is automatic), outputdir
# crush 300 out
function crush() { for f in "$(pwd)/*" ; do resize $1 "${f}" $2/; done }

# dimensions: get the dimensions of an image or directory of images
# parameters: file(s)
# dimensions file.jpg
# dimensions *
function dimensions() { identify -ping -format '%w\x%h\n' $@; }
function dimensions_json() { dimensions=$(identify -ping -format '{\n  "filename": "%f",\n  "width": "%w",\n  "height": "%h"\n},\n' $@); echo ${dimensions::-1}; }
#vdimensions: get the dimensions of a video
function vdimensions() { ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 $1; }

# mget: Download music with `youtube-dl`
function mget() { youtube-dl --extract-audio --audio-format mp3 -l "$1"; }

# codecs: return video and audio codecs
function codecs() { ffprobe "$1" 2>&1 >/dev/null |grep Stream.*Video | sed -e 's/.*Video: //' -e 's/[, ].*//'; ffprobe "$1" 2>&1 >/dev/null |grep Stream.*Audio | sed -e 's/.*Audio: //' -e 's/[, ].*//'; }

# video_encode:
# parameters: filetype, video codec, audio codec
# `video_encode` remux all videos in the current directory to mp4
# `video_encode mkv libx265 aac` encode all videos to mkv with x265 and aac codecs
function video_encode() {
  filetype=${1:-mp4}
  video_codec=${2:-copy}
  audio_codec=${3:-copy}
  output=${4:-output}
  mkdir -p $output
  for i in *.mkv *.webm *.flv *.vob *.ogg *.ogv *.drc *gifv *.mng *.avi *.mov *.qt *.wmv *.yuv *.rm *.rmvb *.asf *.amv *.mp4 *.m4v *.mp *.m?v *.svi *.3gp *.flv *.f4v; do
    ffmpeg -i "$i" -map 0 -c:v $video_codec -c:a $audio_codec -nostats -loglevel 0 "./$output/${i/${i##*.}/$filetype}"
  done
}

# video_merge: `video_merge` combine all video files in the current directory into 1
function video_merge() { ffmpeg -f concat -i <(for f in *.mkv *.webm *.flv *.vob *.ogg *.ogv *.drc *gifv *.mng *.avi *.mov *.qt *.wmv *.yuv *.rm *.rmvb *.asf *.amv *.mp4 *.m4v *.mp *.m?v *.svi *.3gp *.flv *.f4v; do echo "file '$PWD/$f'"; done) -c copy -nostats -loglevel 0 "output.${1}"; }

# ringtone: convert mp3 to m4r and change the length to 30 seconds
function ringtone() { ffmpeg -i "$1" -t 30 -c:a aac -f ipod -b:a 96k "$(basename "$1" .mp3).m4r"; }

#==============================================================================#
# Maintenance
#==============================================================================#

# update: Get macOS Software Updates, update packages, and general cleanup
function update() {
  sama
  echo
  echo 'Dotfiles'
  echo '================================================================================'
  echo
  echo 'Updating dotfiles…'
  update_dotfiles --force
  echo
  echo 'MAS'
  echo '================================================================================'
  echo
  echo 'Updating mas apps…'
  mas upgrade
  echo
  echo 'Homebrew'
  echo '================================================================================'
  echo
  echo 'Updating brew packages…'
  brew update-reset > /dev/null; brew upgrade; brew missing; brew cask upgrade; brew cleanup
  echo
  echo 'NPM'
  echo '================================================================================'
  echo
  echo 'Updating npm modules…'
  npm update -g; npm cache clean --force
  echo
  echo 'PIP'
  echo '================================================================================'
  echo
  echo 'Updating python packages…'
  pip3 install --upgrade pip
  pip3 install -U $(pip freeze | cut -d '=' -f 1)
  echo
  echo 'Sublime Text'
  echo '================================================================================'
  echo
  echo 'Backing up Sublime Text settings…'
  cp ~/Library/Application\ Support/Sublime\ Text*/Packages/User/*.sublime-settings ~/prime/dotfiles/init/
  echo
  echo 'Git Repositories'
  echo '================================================================================'
  echo
  echo 'Updating git repos…'
  cd ~/Documents/Repos/ && update_repos; cd ~
  echo
  echo 'macOS'
  echo '================================================================================'
  echo
  echo 'Running macOS software update…'
  softwareupdate -i -a
  echo
  echo 'Clean'
  echo '================================================================================'
  echo
  echo 'Sorting and deduping ssh known hosts…'
  cat ~/.ssh/known_hosts | sort | uniq > ~/.ssh/known_hosts2; mv ~/.ssh/known_hosts2 ~/.ssh/known_hosts
  echo 'Purge dead links from autojump…'
  j --purge
  echo 'Clear cache…'
  clearcache
  echo 'Clear clipboard…'
  clearclipboard
  echo 'Clear logs…'
  clearlogs
  echo 'Empty trash…'
  emptytrash
  echo 'Everything is up to date!'
}
