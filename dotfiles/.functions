#!/usr/bin/env bash

# List directory contents with cd
function cd() { builtin cd "$@"; ls; }

# Go up N directories
function up() {
  str=""
  count=0
  while [ "$count" -lt "$1" ];
  do
    str=$str"../"
    let count=count+1
  done
  cd $str
}

# Create a new directory and enter it
function mkcd() {
  mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Filter metadata
function metadata() { mdls -raw "$1" -name "$2"; }

# Opens any file in MacOS Quicklook Preview
function ql() { qlmanage -p "$*" >& /dev/null; }

# Zip the directory
function zipd() { zip -r "$1".zip "$1"; }

# 7zip the directory
function 7zip() {
	7z a "$1" "$1"/*;
}

# Example - findreplace searchText replacementText
function findreplace() { ack "$1" -la --print0 | xargs -0 -n 1 sed -i "s/$1/$2/"; }

# Extract most known archives with one command
function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)  tar xvjf $1    ;;
      *.tar.gz)   tar xvzf $1    ;;
      *.tar.xz)   tar xvJf $1    ;;
      *.lzma)     unlzma $1      ;;
      *.bz2)      bunzip2 $1     ;;
      *.rar)      unrar x -ad $1 ;;
      *.gz)       gunzip $1      ;;
      *.tar)      tar xvf $1     ;;
      *.tbz2)     tar xvjf $1    ;;
      *.tgz)      tar xvzf $1    ;;
      *.zip)      unzip $1       ;;
      *.Z)        uncompress $1  ;;
      *.7z)       7z x $1        ;;
      *.xz)       unxz $1        ;;
      *.exe)      cabextract $1  ;;
      *)          echo "extract: '$1' - unknown archive method" ;;
    esac
  else
    echo "$1 - file does not exist"
  fi
}

# Convert string to MD5
function md5() { echo -n "$1" | openssl md5; }

# Convert string to SHA1
function sha1() { echo -n "$1" | openssl sha1; }

# resize: Optimal settings for resizing images
# Parameters - size, file, outputdir
# resize 300 "file.ext" outputdir/
function resize() {
  mogrify -path $3 -resize $1 -quality 85 -density 72 -strip $2
}

# crush: it's resize in batch form
# Parameters: size, outputdir
# crush 300 out
function crush() { for f in $(pwd)/* ; do resize $1 "$f" $2/; done }

# mget: Download music with `youtube-dl`
function mget() { youtube-dl --extract-audio --audio-format mp3 -l "$1"; }

# codecs: return video and audio codecs
function codecs() { ffprobe "$1" 2>&1 >/dev/null |grep Stream.*Video | sed -e 's/.*Video: //' -e 's/[, ].*//'; ffprobe "$1" 2>&1 >/dev/null |grep Stream.*Audio | sed -e 's/.*Audio: //' -e 's/[, ].*//'; }

# remux_all: `remux_all mkv` would remux all mkvs to mp4 in the dir
function remux_all() { for i in *."$1"; do ffmpeg -i "$i" -ac 2 -codec copy "${i/${i##*.}/mp4}"; done }
# audio only
function remux_all_audio() { for i in *."$1"; do ffmpeg -i "$i" -ac 2 -c:v copy -c:a aac "${i/${i##*.}/mp4}"; done }
# audio only for MP4s
function remux_all_audio_mp4() { for i in *."mp4"; do ffmpeg -i "$i" -ac 2 -c:v copy -c:a aac "../${i/${i##*.}/mp4}"; done }
# remux_all_merge: `remux_all_merge mkv` would combine all files into 1
function remux_all_merge() { ffmpeg -f concat -i <(for f in ./*."$1"; do echo "file '$PWD/$f'"; done) -c copy "output.${1}"; }

# atv: convert videos for use with Apple TV
function atv_all() { for i in *."$1"; do ffmpeg -i "$i" -ac 2 -c:v libx264 -c:a aac "${i/${i##*.}/mp4}"; done }
# for MP4s
function atv_all_mp4() { for i in *."mp4"; do ffmpeg -i "$i" -ac 2 -c:v libx264 -c:a aac "../${i/${i##*.}/mp4}"; done }

# ringtone: convert mp3 to m4r and change the length to 30 seconds
function ringtone() { ffmpeg -i "$1" -t 30 -c:a aac -f ipod -b:a 96k "$(basename "$1" .mp3).m4r"; }
